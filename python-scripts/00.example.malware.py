from stix2 import Bundle
from stix2 import DomainName, File, Identity, Indicator, IPv4Address, Malware, ObservedData, Relationship, Sighting
from stix2.base import STIXJSONEncoder
from stix2.properties import StringProperty, TimestampProperty
from stix2.v21 import CustomObservable
import json
import os

@CustomObservable('x-defi-address', [
    ('name', StringProperty(required=True)),
    ('description', StringProperty(required=True)),
    ('created', TimestampProperty(required=True)),
    ('modified', TimestampProperty(required=True)),
    ('blockchain', StringProperty(required=True)),
    ('value', StringProperty(required=True)),
])
class XDefiAddress():
    pass

# Malware was detected at 2022-01-03T15:12:11
# We got logs from the exfiltration of the key at 2022-01-02T23:33:01ZZ
# Let's say that we did this python script at 16:00
created_date = "2022-01-03T16:00:00Z"
modified_date = "2022-12-25T16:00:00Z"
malware_sighting_date = "2022-01-03T15:12:11Z"
key_exfiltration_date = "2022-01-02T23:33:01Z"

# Malware SDO spec https://docs.oasis-open.org/cti/stix/v2.1/csprd01/stix-v2.1-csprd01.html#_Toc16070645
malware = Malware(
    created=created_date,
    modified=modified_date,
    name="malware_stealer.exe",
    description=(
        "Installs in computers, steals cryptocurrency keys, sends them to remote server"
    ),
    # See `malware-type-ov` at https://docs.oasis-open.org/cti/stix/v2.1/csprd01/stix-v2.1-csprd01.html#_Toc16070808
    malware_types=["spyware", "trojan"],
    is_family=False,
    # I'd omit last seen, and hook with a sighting SRO instead
    #
    # https://docs.oasis-open.org/cti/stix/v2.1/csprd01/stix-v2.1-csprd01.html#_Toc16070807
    capabilities=[
        "exfiltrates-data",
        "communicates-with-c2",
        "steals-authentication-credentials"
    ],
)

# Now we will tell that the candidate
# (which in this exercise, it is supposed, did the research)
# found the malware at the given time and computed the hash

# This is
# Researcher -> saw -> the hash at time T -> which indicates -> malware

malware_hash_indicator = Indicator(
    created=created_date,
    modified=modified_date,
    valid_from=malware_sighting_date,
    name="0xeff003d64046a6f521ba31f39405cb720e953958",
    description="Platypus Attacker",
    pattern_type="stix",
    # hash-algorithm-ov at
    # https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_tumklw3o2gyz
    pattern="[file:hashes.'SHA-256' = '872e4e50ce9990d8b041330c47c9ddd11bec6b503ae9386a99da8584e9bb12c4']",
)

malware_hash_relationship = Relationship(
    created=created_date,
    modified=modified_date,
    relationship_type="indicates",
    spec_version="2.1",
    source_ref=malware_hash_indicator.id,
    target_ref=malware.id
)

security_researcher_identity = Identity(
    created=created_date,
    modified=modified_date,
    name="Jim Hacker", # Hidden reference to a beloved TV show.
    description=(
        "Threat Analyst Researcher Candidate"
    ),
    identity_class="individual",
    sectors=["financial-services", "technology"],
)

attacked_server = IPv4Address(value="10.123.2.1")

malware_attacked_server_relationship = Relationship(
    created=created_date,
    modified=modified_date,
    relationship_type="located-at",
    source_ref=malware.id,
    target_ref=attacked_server.id
)

stolen_asset = XDefiAddress(
    created=created_date,
    modified=modified_date,
    name="0xAF80c91b26260834FC5234cB36E3f373e88F3C91 - Ethereum",
    description="Key stolen by malware_stealer.exe",
    blockchain="ethereum",
    value="0xAF80c91b26260834FC5234cB36E3f373e88F3C91",
)

# relationship_type MAY be any string.
# https://docs.oasis-open.org/cti/stix/v2.1/os/stix-v2.1-os.html#_e2e1szrqfoan
malware_stolen_key_relationship = Relationship(
    created=created_date,
    modified=modified_date,
    relationship_type="stolen-by",
    source_ref=stolen_asset.id,
    target_ref=malware.id,
    allow_custom=True # we are using XDefiAddress
)

attacking_domain = DomainName(value="stealercc.com")

malware_attacking_domain_relationship = Relationship(
    created=created_date,
    modified=modified_date,
    relationship_type="communicates-with",
    source_ref=malware.id,
    target_ref=attacking_domain.id
)

# This object is key, as it tells us when the malware was found
malware_sighting = Sighting(
    created=created_date,
    modified=modified_date,
    # Required ones
    ## Could be different from the identity who actually saw this
    created_by_ref=security_researcher_identity.id,
    sighting_of_ref=malware_hash_indicator.id,
    # Non Required fields, BUT _very_ relevant
    first_seen=malware_sighting_date,
    last_seen=malware_sighting_date, # Researcher saw it once, so first=last
    count=1,
    where_sighted_refs=[
        security_researcher_identity.id # This is the "saw" label at the edge
    ]
)

# To represent the log the exfiltration we could use the observed data SDO
key_exfiltration_log = ObservedData(
    created=created_date,
    modified=modified_date,
    first_observed=key_exfiltration_date,
    last_observed=key_exfiltration_date,
    number_observed=1,
    # Remember, here only go SCO and SRO
    object_refs=[
        attacking_domain.id,
        stolen_asset.id,
        attacked_server.id,
    ],
    allow_custom=True # we are using XDefiAddress
)

BundleofAllObjects = Bundle(
    malware,
    malware_hash_indicator,
    malware_hash_relationship,
    security_researcher_identity,
    attacked_server,
    malware_attacked_server_relationship,
    stolen_asset,
    malware_stolen_key_relationship,
    attacking_domain,
    malware_attacking_domain_relationship,
    malware_sighting,
    key_exfiltration_log,
    allow_custom=True
)

# File carpentry
script_name = os.path.basename(__file__)
json_file_name = os.path.splitext(script_name)[0] + ".json"

with open('../json-stix-db/' + json_file_name, 'w') as f:
    f.write(json.dumps(BundleofAllObjects, indent=4, cls=STIXJSONEncoder))

# Count STIX objects by type and print it
from collections import defaultdict
object_count = defaultdict(int)

for obj in BundleofAllObjects.objects:
    object_count[obj.type] += 1

sorted_object_count = {key: object_count[key] for key in sorted(object_count)}
print(sorted_object_count)

